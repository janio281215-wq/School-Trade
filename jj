<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Ejercicios con Imagen — Mi Clase</title>
  <style>
    :root {
      --bg: #f7f7fb;
      --card: #ffffff;
      --text: #23262f;
      --muted: #6b7280;
      --brand: #4169e1;
      --ok: #16a34a;
      --bad: #dc2626;
      --ring: rgba(65,105,225,.25);
      --radius: 14px;
    }
    * { box-sizing: border-box; }
    body {
      margin: 0; padding: 24px;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
      background: radial-gradient(1200px 800px at 80% -10%, #eef2ff 0%, transparent 55%), var(--bg);
      color: var(--text);
    }
    header {
      max-width: 980px; margin: 0 auto 20px auto;
      display: grid; gap: 10px;
    }
    header h1 { margin: 0; font-size: clamp(1.4rem, 1.2rem + 1.2vw, 2rem); }
    header p { margin: 0; color: var(--muted); }
    .card {
      max-width: 980px; margin: 12px auto;
      background: var(--card); border-radius: var(--radius);
      box-shadow: 0 8px 30px rgba(0,0,0,.06);
      padding: 18px;
      border: 1px solid rgba(0,0,0,.06);
    }
    .grid {
      display: grid; gap: 14px;
      grid-template-columns: 1fr;
    }
    @media (min-width: 820px) {
      .grid { grid-template-columns: 320px 1fr; align-items: start; }
    }
    .q-image {
      width: 100%; border-radius: 10px; border: 1px solid rgba(0,0,0,.08);
      background: #fafafa; overflow: hidden;
    }
    .q-image img {
      display: block; width: 100%; height: auto; object-fit: cover;
    }
    .q-body h3 { margin: 0 0 8px; font-size: 1.05rem; }
    .q-body p.desc { margin: 0 0 10px; color: var(--muted); }
    .options { display: grid; gap: 8px; margin-top: 8px; }
    .opt {
      display: grid; grid-template-columns: 22px 1fr; gap: 10px; align-items: start;
      padding: 10px; border-radius: 10px; border: 1px solid rgba(0,0,0,.08);
      background: #fcfcff;
    }
    .opt:hover { border-color: var(--brand); box-shadow: 0 0 0 4px var(--ring); }
    input[type="text"], textarea {
      width: 100%; padding: 10px 12px;
      border: 1px solid rgba(0,0,0,.15);
      border-radius: 10px; outline: none; background: #fff;
    }
    input[type="text"]:focus, textarea:focus { border-color: var(--brand); box-shadow: 0 0 0 4px var(--ring); }
    .meta {
      display: grid; gap: 10px; grid-template-columns: 1fr; margin-top: 6px;
    }
    @media (min-width: 520px) { .meta { grid-template-columns: 1fr 1fr; } }
    .pill {
      display: inline-flex; align-items: center; gap: 8px;
      padding: 8px 12px; border-radius: 999px; background: #eef2ff; color: #243189; font-weight: 600; width: max-content;
    }
    .footer-actions {
      max-width: 980px; margin: 16px auto; display: flex; gap: 10px; flex-wrap: wrap;
    }
    button {
      appearance: none; border: none; cursor: pointer;
      padding: 12px 16px; border-radius: 12px; font-weight: 700;
      background: var(--brand); color: #fff;
      box-shadow: 0 10px 25px rgba(65,105,225,.25);
    }
    button.secondary { background: #111827; }
    button.ghost { background: transparent; color: var(--text); border: 1px solid rgba(0,0,0,.15); }
    .score { font-weight: 800; }
    .feedback { margin-top: 10px; font-weight: 700; }
    .ok { color: var(--ok); }
    .bad { color: var(--bad); }
    .muted { color: var(--muted); }
    .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0; }
  </style>
</head>
<body>
  <header>
    <h1>Ejercicios con foto — Mi Clase</h1>
    <p class="muted">Escribe tu nombre, responde los ejercicios viendo las imágenes y al final pulsa <b>Enviar</b>.</p>
    <div class="card">
      <div class="meta">
        <label>
          <span>Nombre del estudiante</span>
          <input id="studentName" type="text" placeholder="Ej: Ana Pérez" autocomplete="name" />
        </label>
        <label>
          <span>Grupo / Curso (opcional)</span>
          <input id="studentGroup" type="text" placeholder="Ej: 9B o Matemática" />
        </label>
      </div>
    </div>
  </header>

  <main id="questions"></main>

  <div class="footer-actions">
    <button id="submitBtn" title="Calcular puntaje y mostrar correcciones">Enviar</button>
    <button id="downloadBtn" class="secondary" title="Descargar tus respuestas en CSV">Descargar CSV</button>
    <button id="resetBtn" class="ghost" title="Borrar respuestas guardadas y empezar de cero">Reiniciar</button>
    <span id="score" class="score"></span>
  </div>

  <template id="q-template">
    <section class="card">
      <div class="grid">
        <figure class="q-image">
          <img alt="" />
          <figcaption class="sr-only"></figcaption>
        </figure>
        <div class="q-body">
          <span class="pill"></span>
          <h3></h3>
          <p class="desc"></p>
          <div class="options"></div>
          <div class="feedback muted"></div>
        </div>
      </div>
    </section>
  </template>

  <script>
    // ====== CONFIGURA TUS PREGUNTAS AQUÍ ======
    // type: "mc" = opción múltiple, "short" = respuesta corta (texto)
    // image: puedes usar archivos locales (mis_fotos/ej1.jpg) o URLs completas (https://...).
    const QUESTIONS = [
      {
        id: "q1",
        type: "mc",
        title: "Suma con apoyo visual",
        prompt: "Observa la imagen y responde: ¿Cuánto es 5 + 3?",
        image: "https://images.unsplash.com/photo-1584697964156-cf3f1a3fa9e1?q=80&w=1400&auto=format&fit=crop",
        imageAlt: "Tarjeta con números y lápiz.",
        options: ["6", "7", "8", "9"],
        correct: "8",
        points: 1,
        note: "Recuerda contar con el ejemplo de la imagen."
      },
      {
        id: "q2",
        type: "short",
        title: "Identifica el objeto",
        prompt: "Mira la foto y escribe el nombre del objeto en español.",
        image: "https://images.unsplash.com/photo-1493031791932-7f2b88ebf0a4?q=80&w=1400&auto=format&fit=crop",
        imageAlt: "Regla escolar sobre una mesa.",
        correct: ["regla"],
        points: 1,
        note: "Ortografía: no hace falta mayúscula."
      },
      {
        id: "q3",
        type: "mc",
        title: "Geometría con ejemplo",
        prompt: "Según la imagen, ¿qué figura es?",
        image: "https://images.unsplash.com/photo-1517048676732-d65bc937f952?q=80&w=1400&auto=format&fit=crop",
        imageAlt: "Triángulo de papel sobre fondo azul.",
        options: ["Cuadrado", "Rectángulo", "Triángulo", "Círculo"],
        correct: "Triángulo",
        points: 1,
        note: "Fíjate en el número de lados."
      },
      {
        id: "q4",
        type: "short",
        title: "Comprensión visual",
        prompt: "Observa la foto y escribe el color principal.",
        image: "https://images.unsplash.com/photo-1508261303786-0e3ab4e42c28?q=80&w=1400&auto=format&fit=crop",
        imageAlt: "Globo rojo sobre fondo claro.",
        correct: ["rojo"], // puedes agregar variantes: ["rojo", "color rojo"]
        points: 1,
        note: "Solo el color principal."
      }
    ];

    // ====== UTILIDADES ======
    const $ = (sel, root = document) => root.querySelector(sel);
    const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
    const STORAGE_KEY = "quiz_with_images_v1";

    const state = {
      answers: {}, // { [id]: value }
      scored: false,
      score: 0,
      max: QUESTIONS.reduce((s, q) => s + (q.points ?? 1), 0)
    };

    function saveProgress() {
      const payload = {
        answers: state.answers,
        name: $("#studentName").value || "",
        group: $("#studentGroup").value || ""
      };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(payload));
    }

    function restoreProgress() {
      try {
        const raw = localStorage.getItem(STORAGE_KEY);
        if (!raw) return;
        const data = JSON.parse(raw);
        if (data?.answers) {
          state.answers = data.answers;
        }
        if (data?.name) $("#studentName").value = data.name;
        if (data?.group) $("#studentGroup").value = data.group;
      } catch {}
    }

    function normalize(text) {
      return String(text ?? "")
        .trim()
        .toLowerCase()
        .normalize("NFD")
        .replace(/\p{Diacritic}/gu, "");
    }

    function renderQuestions() {
      const container = $("#questions");
      container.innerHTML = "";
      QUESTIONS.forEach((q, idx) => {
        const tpl = $("#q-template").content.cloneNode(true);
        const root = tpl.children[0];

        // Imagen
        const img = $("img", root);
        img.src = q.image;
        img.alt = q.imageAlt || "";
        $("figcaption", root).textContent = q.imageAlt || "";

        // Meta
        $(".pill", root).textContent = `Pregunta ${idx + 1} · ${q.points ?? 1} punto${(q.points ?? 1) > 1 ? "s" : ""}`;

        // Texto
        $("h3", root).textContent = q.title;
        $(".desc", root).textContent = q.prompt + (q.note ? " " + q.note : "");

        const opts = $(".options", root);

        if (q.type === "mc") {
          q.options.forEach((opt, i) => {
            const id = `${q.id}_opt_${i}`;
            const wrap = document.createElement("label");
            wrap.className = "opt";
            wrap.setAttribute("for", id);

            const radio = document.createElement("input");
            radio.type = "radio";
            radio.name = q.id;
            radio.id = id;
            radio.value = opt;
            radio.checked = state.answers[q.id] === opt;
            radio.addEventListener("change", e => {
              state.answers[q.id] = e.target.value;
              saveProgress();
            });

            const span = document.createElement("span");
            span.textContent = opt;

            wrap.appendChild(radio);
            wrap.appendChild(span);
            opts.appendChild(wrap);
          });
        } else if (q.type === "short") {
          const input = document.createElement("input");
          input.type = "text";
          input.placeholder = "Escribe tu respuesta aquí";
          input.value = state.answers[q.id] ?? "";
          input.addEventListener("input", e => {
            state.answers[q.id] = e.target.value;
            saveProgress();
          });
          opts.appendChild(input);
        }

        container.appendChild(root);
      });
    }

    function grade() {
      let score = 0;
      QUESTIONS.forEach(q => {
        const user = state.answers[q.id];
        let correct = false;

        if (q.type === "mc") {
          correct = user === q.correct;
        } else if (q.type === "short") {
          const expected = Array.isArray(q.correct) ? q.correct : [q.correct];
          const normUser = normalize(user);
          correct = expected.map(normalize).includes(normUser);
        }

        if (correct) score += (q.points ?? 1);

        // feedback
        const cards = $$(".card");
        const idx = QUESTIONS.findIndex(qq => qq.id === q.id);
        const fb = $(".feedback", cards[idx]);
        fb.classList.remove("muted", "ok", "bad");
        fb.classList.add(correct ? "ok" : "bad");
        fb.textContent = correct ? "✅ ¡Correcto!" :
          (q.type === "mc" ? `❌ Respuesta correcta: ${q.correct}` : "❌ Revisa tu respuesta.");
      });

      state.scored = true;
      state.score = score;
      $("#score").textContent = `Puntaje: ${score} / ${state.max}`;
    }

    function toCSV() {
      const name = ($("#studentName").value || "").replaceAll(",", " ");
      const group = ($("#studentGroup").value || "").replaceAll(",", " ");
      const rows = [
        ["timestamp", "nombre", "grupo", "pregunta_id", "tipo", "respuesta", "correcta", "puntos"],
      ];
      const ts = new Date().toISOString();

      QUESTIONS.forEach(q => {
        const ans = String(state.answers[q.id] ?? "").replaceAll(",", " ");
        const correct =
          q.type === "mc" ? q.correct :
          Array.isArray(q.correct) ? q.correct.join("|") : String(q.correct);
        rows.push([ts, name, group, q.id, q.type, ans, correct, q.points ?? 1]);
      });

      const csv = rows.map(r => r.map(v => `"${String(v).replaceAll('"','""')}"`).join(",")).join("\n");
      const blob = new Blob([csv], { type: "text/csv;charset=utf-8" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      const safeName = name || "estudiante";
      a.download = `respuestas_${safeName}_${new Date().toISOString().slice(0,19).replace(/[:T]/g,"-")}.csv`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    }

    function resetAll() {
      localStorage.removeItem(STORAGE_KEY);
      state.answers = {};
      state.scored = false;
      state.score = 0;
      $("#score").textContent = "";
      renderQuestions();
      $$(".feedback").forEach(el => { el.textContent = ""; el.className = "feedback muted"; });
      $("#studentName").value = "";
      $("#studentGroup").value = "";
    }

    // ====== INIT ======
    restoreProgress();
    renderQuestions();

    $("#submitBtn").addEventListener("click", () => {
      if (!$("#studentName").value.trim()) {
        alert("Por favor, escribe tu nombre antes de enviar.");
        $("#studentName").focus();
        return;
      }
      grade();
      saveProgress();
      window.scrollTo({ top: 0, behavior: "smooth" });
    });

    $("#downloadBtn").addEventListener("click", () => {
      if (!state.scored) {
        const go = confirm("Aún no has presionado Enviar para calificar. ¿Descargar de todos modos?");
        if (!go) return;
      }
      toCSV();
    });

    $("#resetBtn").addEventListener("click", () => {
      const ok = confirm("¿Seguro que deseas borrar todo y reiniciar?");
      if (ok) resetAll();
    });
  </script>
</body>
</html>
